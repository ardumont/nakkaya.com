#+title: Password Based Encryption Using AES
#+tags: java encryption

In a recent engagement, I needed to encrypt an object then write it to
disk. I wanted to use [[http://en.wikipedia.org/wiki/Advanced_Encryption_Standard][Advanced Encryption Standard (AES)]], 
but unfortunately Java does not provide a way to use password based
encryption with AES. [[http://www.bouncycastle.org/][Bouncy Castle]] does provide the required
libraries that will allow us to use password based encryption with AES.

In this scenario, I wanted the user to provide the pass phrase.

#+begin_src java
  import javax.crypto.SecretKeyFactory;
  import javax.crypto.SecretKey;
  import javax.crypto.SealedObject;
  import javax.crypto.Cipher;
  import javax.crypto.spec.PBEKeySpec;
  import javax.crypto.spec.PBEParameterSpec;
  import java.security.Security;
  
  import org.bouncycastle.jce.provider.BouncyCastleProvider;
  
  class seal {

      static String algorithm = "PBEWITHSHA256AND128BITAES-CBC-BC";
      static char[] passPherase = "secretpass".toCharArray();
      static byte[] salt = "a9v5n38s".getBytes();
      static String secretData = "Very Secret Data!!";
#+end_src

In real world you should generate the salt randomly. We need to create a
key spec based on the user input then create a cipher for encrypting or
decrypting the data.

Encrypting the data,

#+begin_src java
      static SealedObject encrypt(String data) throws Exception{
          PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt,20);
          PBEKeySpec pbeKeySpec = new PBEKeySpec(passPherase);
          SecretKeyFactory secretKeyFactory = 
              SecretKeyFactory.getInstance(algorithm);
          SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec);
  
          Cipher cipher = Cipher.getInstance(algorithm);
          cipher.init(Cipher.ENCRYPT_MODE,secretKey,pbeParamSpec);
  
          return new SealedObject(data,cipher);
      }
#+end_src

Decrypting the data back again,

#+begin_src java
      static String decrypt(SealedObject sealedObject) throws Exception{
          PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt,20);
          PBEKeySpec pbeKeySpec = new PBEKeySpec(passPherase);
          SecretKeyFactory secretKeyFactory = 
              SecretKeyFactory.getInstance(algorithm);
          SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec);
  
          Cipher cipher = Cipher.getInstance(algorithm);
          cipher.init(Cipher.DECRYPT_MODE,secretKey,pbeParamSpec);
          return (String)sealedObject.getObject(cipher);
      }
#+end_src

Using a SealedObject you can basically encrypt any object you want, and
serialize it to a file.

#+begin_src java
      public static void main(String[] args) {
          try{
              Security.addProvider(new BouncyCastleProvider());
              SealedObject encryptedString = encrypt(secretData);
              String decryptedString = decrypt(encryptedString);
              System.out.println(decryptedString);
          }catch( Exception e ) { 
              System.out.println(e.toString());
          }
      }
  }
#+end_src
